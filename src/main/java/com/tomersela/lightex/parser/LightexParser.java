/* LightexParser.java */
/* Generated By:JavaCC: Do not edit this line. LightexParser.java */
package com.tomersela.lightex.parser;
import com.tomersela.lightex.parser.exceptions.InvalidSymbol;
import com.tomersela.lightex.parser.exceptions.EmptyCode;
import com.tomersela.lightex.parser.exceptions.LightexParseException;
import com.tomersela.lightex.parser.exceptions.UnexpectedEndOfCode;
import com.tomersela.lightex.ast.*;
import java.io.StringReader;
import java.math.BigDecimal;
import java.util.LinkedList;

public class LightexParser implements LightexParserConstants {

    final private LinkedList<Val> vals = new LinkedList<>();
    final private LinkedList<PlaceHolder> placeHolders = new LinkedList<>();

    public static LightexAst parse(String code) throws LightexParseException {
        try {
            LightexParser LightexParser = new LightexParser(new StringReader(code));
            Exp expression = LightexParser.start();
            return new LightexAst(expression, LightexParser.vals, LightexParser.placeHolders);
        } catch (ParseException pe) {
            if (pe.currentToken.next != null && pe.tokenImage[pe.currentToken.next.kind].equals("<EOF>")) {
                throw new UnexpectedEndOfCode(
                    pe.currentToken.next.beginLine,
                    pe.currentToken.next.beginColumn,
                    pe.currentToken.next.endLine,
                    pe.currentToken.next.endColumn);
            }
            throw new InvalidSymbol(
                    pe.currentToken.next.image,
                    pe.currentToken.next.beginLine,
                    pe.currentToken.next.beginColumn,
                    pe.currentToken.next.endLine,
                    pe.currentToken.next.endColumn
            );
        }
    }

    public LinkedList<Val> getVals() {
      return vals;
    }

  final public Exp start() throws ParseException, EmptyCode {Exp e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case MINUS:
    case NUMBER:
    case BOOLEAN:
    case EXCLAMATION:
    case ID:
    case STRING:
    case STRING_QUOTE:
    case RPLACE_HOLDER:{
      e = expression();
      jj_consume_token(0);
{if ("" != null) return e;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if (true) throw new EmptyCode();}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Exp expression() throws ParseException {Exp e;
    e = or();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public Exp or() throws ParseException {Exp left; Exp right; Token n;
    left = and();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n = jj_consume_token(OR);
      right = and();
left = new Or(left, right, n);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp and() throws ParseException {Exp left; Exp right; Token n;
    left = equality();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n = jj_consume_token(AND);
      right = equality();
left = new And(left, right, n);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp equality() throws ParseException {Exp left; Exp right; Token n;
    left = relational();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case NOT_EQUAL:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        n = jj_consume_token(EQUAL);
        right = relational();
left = new Equal(left, right, n);
        break;
        }
      case NOT_EQUAL:{
        n = jj_consume_token(NOT_EQUAL);
        right = relational();
left = new NotEqual(left, right, n);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp relational() throws ParseException {Exp left; Exp right; Token n;
    left = addLike();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GREATER:
      case GREATER_EQUAL:
      case LESS:
      case LESS_EQUAL:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GREATER:{
        n = jj_consume_token(GREATER);
        right = addLike();
left = new Greater(left, right, n);
        break;
        }
      case GREATER_EQUAL:{
        n = jj_consume_token(GREATER_EQUAL);
        right = addLike();
left = new GreaterEqual(left, right, n);
        break;
        }
      case LESS:{
        n = jj_consume_token(LESS);
        right = addLike();
left = new Less(left, right, n);
        break;
        }
      case LESS_EQUAL:{
        n = jj_consume_token(LESS_EQUAL);
        right = addLike();
left = new LessEqual(left, right, n);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp addLike() throws ParseException {Exp left; Exp right; Token n;
    left = multLike();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        n = jj_consume_token(PLUS);
        right = multLike();
left = new Add(left, right, n);
        break;
        }
      case MINUS:{
        n = jj_consume_token(MINUS);
        right = multLike();
left = new Sub(left, right, n);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp multLike() throws ParseException {Exp left; Exp right; Token n;
    left = pow();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case MOD:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIV:{
        n = jj_consume_token(DIV);
        right = pow();
left = new Div(left, right, n);
        break;
        }
      case TIMES:{
        n = jj_consume_token(TIMES);
        right = pow();
left = new Mul(left, right, n);
        break;
        }
      case MOD:{
        n = jj_consume_token(MOD);
        right = pow();
left = new Mod(left, right, n);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp pow() throws ParseException {Exp left; Exp right; Token n;
    left = atom();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POW:{
      n = jj_consume_token(POW);
      right = pow();
left = new Pow(left, right, n);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public Exp atom() throws ParseException {String name; Exp e; Token n; Params p = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      n = jj_consume_token(NUMBER);
{if ("" != null) return new Num(new BigDecimal(n.image), n);}
      break;
      }
    case BOOLEAN:{
      n = jj_consume_token(BOOLEAN);
{if ("" != null) return new Bool(Boolean.parseBoolean(n.image), n);}
      break;
      }
    case MINUS:{
      n = jj_consume_token(MINUS);
      e = atom();
{if ("" != null) return new UnaryMinus(e, n);}
      break;
      }
    case EXCLAMATION:{
      n = jj_consume_token(EXCLAMATION);
      e = atom();
{if ("" != null) return new Not(e, n);}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      e = expression();
      jj_consume_token(RPAREN);
{if ("" != null) return e;}
      break;
      }
    case STRING:{
      n = jj_consume_token(STRING);
{if ("" != null) return Text.fromQuoted(n.image, n);}
      break;
      }
    case STRING_QUOTE:{
      n = jj_consume_token(STRING_QUOTE);
{if ("" != null) return Text.fromQuoted(n.image, n);}
      break;
      }
    case RPLACE_HOLDER:{
      n = jj_consume_token(RPLACE_HOLDER);
PlaceHolder placeHolder = PlaceHolder.fromWrapped(n.image, n);
    placeHolders.add(placeHolder);
    {if ("" != null) return placeHolder;}
      break;
      }
    case ID:{
      n = jj_consume_token(ID);
name = n.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        p = params();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
if (p == null) {
        Val v = new Val(name, n);
        vals.add(v);
        {if ("" != null) return v;}
    } else {
        {if ("" != null) return new FunctionCall(name, p, n);}
    }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Params params() throws ParseException {Exp e; Token n; LinkedList<Exp> params = new LinkedList<>();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case MINUS:
    case NUMBER:
    case BOOLEAN:
    case EXCLAMATION:
    case ID:
    case STRING:
    case STRING_QUOTE:
    case RPLACE_HOLDER:{
      e = expression();
params.add(e);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        e = expression();
params.add(e);
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new Params(params.toArray(new Exp[0]));}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public LightexParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x68128481,0x80000,0x40000,0x4200000,0x4200000,0x3c00000,0x3c00000,0x600,0x600,0x5800,0x5800,0x2000,0x80,0x68128480,0x10000000,0x68128480,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,};
	}

  /** Constructor with InputStream. */
  public LightexParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LightexParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LightexParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LightexParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LightexParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LightexParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LightexParser(LightexParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LightexParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[34];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 34; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
